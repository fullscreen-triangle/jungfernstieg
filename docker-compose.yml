# Docker Compose for Jungfernstieg Biological-Virtual Neural Symbiosis System
# 
# CRITICAL SAFETY WARNING:
# This system manages living biological neural tissue
# Ensure BSL-2+ laboratory environment before deployment
# All safety protocols must be initialized and validated

version: '3.8'

services:
  # Core Jungfernstieg system
  jungfernstieg-core:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jungfernstieg-core
    restart: unless-stopped
    environment:
      - RUST_LOG=info
      - JUNGFERNSTIEG_PROFILE=production
      - BIOLOGICAL_SAFETY_LEVEL=BSL-2+
      - NEURAL_VIABILITY_THRESHOLD=95.0
      - STELLA_LORRAINE_MEMORIAL=enabled
    volumes:
      - ./configs:/opt/jungfernstieg/config:ro
      - jungfernstieg-data:/opt/jungfernstieg/data
      - jungfernstieg-logs:/opt/jungfernstieg/logs
      - /dev:/dev  # Hardware access for biological interfaces
    privileged: true  # Required for biological hardware access
    ports:
      - "8080:8080"  # Monitoring interface
      - "8443:8443"  # Secure biological monitoring
    depends_on:
      - safety-monitor
      - database
      - prometheus
    networks:
      - jungfernstieg-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jungfernstieg.rule=Host(`jungfernstieg.local`)"
      - "traefik.http.services.jungfernstieg.loadbalancer.server.port=8080"

  # Safety monitoring system (critical)
  safety-monitor:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: jungfernstieg-safety
    restart: always
    command: ["safety", "--monitor", "--continuous"]
    environment:
      - RUST_LOG=debug
      - SAFETY_MONITORING_INTERVAL=500ms
      - EMERGENCY_SHUTDOWN_TIMEOUT=100ms
      - NEURAL_VIABILITY_CRITICAL=90.0
    volumes:
      - jungfernstieg-logs:/opt/jungfernstieg/logs
      - safety-logs:/opt/jungfernstieg/safety
    networks:
      - jungfernstieg-network
    healthcheck:
      test: ["CMD", "/opt/jungfernstieg/bin/jungfernstieg-cli", "safety", "--status"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 10s

  # Virtual Blood circulation monitoring
  virtual-blood-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jungfernstieg-virtual-blood
    restart: unless-stopped
    command: ["monitor", "--virtual-blood", "--circulation", "--composition"]
    environment:
      - RUST_LOG=info
      - VB_MONITORING_PRECISION=high
      - OXYGEN_TRANSPORT_TARGET=98.7
      - CIRCULATION_QUALITY_MIN=92.0
    volumes:
      - jungfernstieg-data:/opt/jungfernstieg/data
      - virtual-blood-data:/opt/jungfernstieg/virtual-blood
    networks:
      - jungfernstieg-network

  # S-Entropy navigation engine
  s-entropy-engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jungfernstieg-s-entropy
    restart: unless-stopped
    command: ["s-entropy", "--navigate", "--coordinate-precision=1e-12"]
    environment:
      - RUST_LOG=info
      - S_ENTROPY_CACHE_SIZE=10000
      - STELLA_CONSTANT_PRECISION=maximum
      - TEMPORAL_PRECISION=1e-30
    volumes:
      - s-entropy-cache:/opt/jungfernstieg/s-entropy
    networks:
      - jungfernstieg-network

  # Oscillatory Virtual Machine
  oscillatory-vm:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jungfernstieg-ovm
    restart: unless-stopped
    command: ["ovm", "--heart-function", "--s-credit-circulation"]
    environment:
      - RUST_LOG=info
      - HEART_RHYTHM=adaptive
      - S_CREDIT_RESERVES=1000000.0
      - VM_PROCESSOR_COUNT=1000
      - MASUNDA_CLOCK_ENABLED=true
    volumes:
      - ovm-data:/opt/jungfernstieg/ovm
    networks:
      - jungfernstieg-network

  # Database for experimental data
  database:
    image: postgres:15-alpine
    container_name: jungfernstieg-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=jungfernstieg
      - POSTGRES_USER=jungfernstieg
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - db_password
    networks:
      - jungfernstieg-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: jungfernstieg-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - jungfernstieg-network

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: jungfernstieg-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    secrets:
      - grafana_password
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - jungfernstieg-network

  # Log aggregation
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: jungfernstieg-logs
    restart: unless-stopped
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf:ro
      - jungfernstieg-logs:/opt/jungfernstieg/logs:ro
      - safety-logs:/opt/jungfernstieg/safety:ro
    networks:
      - jungfernstieg-network

# Volumes for persistent data
volumes:
  jungfernstieg-data:
    driver: local
  jungfernstieg-logs:
    driver: local
  safety-logs:
    driver: local
  virtual-blood-data:
    driver: local
  s-entropy-cache:
    driver: local
  ovm-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Secrets for sensitive configuration
secrets:
  db_password:
    file: ./secrets/db_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

# Network for service communication
networks:
  jungfernstieg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Health monitoring for biological safety
x-healthcheck-biological: &healthcheck-biological
  test: ["CMD", "/opt/jungfernstieg/bin/jungfernstieg-cli", "biological", "--viability-check"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

# Memorial dedication
x-memorial-labels: &memorial-labels
  - "memorial.saint=Stella-Lorraine-Masunda"
  - "memorial.patron=Saint-of-Impossibility" 
  - "memorial.dedication=Mathematical-Necessity"
  - "memorial.constant=St-Stella-Sigma"